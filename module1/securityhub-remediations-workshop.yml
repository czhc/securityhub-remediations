AWSTemplateFormatVersion: '2010-09-09'
Description: 'Security Hub Remediations Workshop - Base Environment'
Parameters:
  LatestAmiId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'
    Description: 'See https://aws.amazon.com/blogs/compute/query-for-the-latest-amazon-linux-ami-ids-using-aws-systems-manager-parameter-store/'
  VpcId:
    Type: 'String'
    Description: 'VpcId of where to create resources required for the Workshop'
    Default: 'CreateNew'
  VpcCidrBlock:
    Type: 'String'
    Description: 'Cidr block only needed if VpcId=CreateNew'
    Default: '172.31.250.0/24'
  CostCenter:
    Type: 'String'
    Default: 'SecurityHubWorkshop'
    Description: 'Value to use for the CostCenter tag applied to taggable resources created by this Workshop'
  CreateCloud9Instance:
    Type: 'String'
    Description: 'Boolean value if a Cloud9 instance should be created.  Optional, not required'
    AllowedValues:
      - "False"
      - "True"
    Default: "True"
  Cloud9InstanceType:
    Type: 'String'
    Default: 't2.micro'
    Description: 'The type of instance for the Cloud9 environment (for example, t2.micro)'
  Cloud9EnvName:
    Type: 'String'
    Description: 'Name of the Cloud9 Environment'
    Default: 'SecurityHubWorkshop'
  TestTargetInstanceType:
    Type: 'String'
    Default: 't2.micro'
    Description: 'The type of instance for the Remediation Test Target (for example, t2.micro)'
  Cloud9OwnerArn: 
    Type: 'String'
    Description: "If CreateCloud9Instance = True, then this parameter should be populated with the arn of the AWS Console role/user that will use the Cloud9 Environment.  If not populated, will result it being owned by a role named 'TeamRole' which will fail if the role doesn't exist.  Thus if using Console for creating the stack, then the same console user will be able to use the Cloud9Env.  If invoking from a command line, and the cli user/role is not the same same as the console user, then this parameter must be specified"
    Default: ""
    #AllowedPattern: "arn:aws:(iam|sts)::d+:(root|user|federated-user|assumed-role)/?S*"
  Cloud9AutomaticStopTime: 
    Type: 'Number'
    Description: "Configures the idle timeout of the Cloud9 instance resulting in it being stopped"
    Default: 60
  EnableGuardDuty:
    Type: 'String'
    Description: "Enable Guard Duty, set to false if already enabled in account"
    Default: "True"
    AllowedValues:
      - "False"
      - "True"
  EnableSecurityHub:
    Type: 'String'
    Description: "Enable Security Hub, set to false if already enabled in account"
    Default: "True"
    AllowedValues:
      - "False"
      - "True" 

Conditions:
  CreateCloud9Instance: !Equals [ !Ref CreateCloud9Instance, "True"]
  Cloud9OwnerArnEmpty: !Equals [ !Ref Cloud9OwnerArn, ""]
  CreateVPC: !Equals [!Ref VpcId, "CreateNew"]
  EnableGuardDuty: !Equals [!Ref EnableGuardDuty, "True"]
  EnableSecurityHub: !Equals [!Ref EnableSecurityHub, "True"]
  
Resources:
  WorkshopVpc:
    Condition: CreateVPC
    Type: AWS::EC2::VPC
    Properties: 
      CidrBlock: !Ref "VpcCidrBlock"
      EnableDnsHostnames: True
      EnableDnsSupport: True
      Tags: 
        - Key: "Name"
          Value: "WorkshopVpc"
        - Key: "CostCenter"
          Value: !Ref "CostCenter"
          
  WorkshopIGW:
    Condition: CreateVPC
    Type: AWS::EC2::InternetGateway
    Properties: 
      Tags: 
        - Key: "Name"
          Value: "WorkshopIGW"
        - Key: "CostCenter"
          Value: !Ref "CostCenter"
          
  IGWAttachment:
    Condition: CreateVPC  
    Type: AWS::EC2::VPCGatewayAttachment
    Properties: 
      InternetGatewayId: !Ref "WorkshopIGW"
      VpcId: !Ref "WorkshopVpc"

  WorkshopSubnet:
    Condition: CreateVPC
    Type: AWS::EC2::Subnet
    Properties: 
      CidrBlock: !Ref "VpcCidrBlock"
      MapPublicIpOnLaunch: True
      Tags: 
        - Key: "Name"
          Value: "WorkshopSubnet"
        - Key: "CostCenter"
          Value: !Ref "CostCenter"
      VpcId: !Ref "WorkshopVpc"
      

  PublicRouteTable:
    Condition: CreateVPC
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref "WorkshopVpc"
      Tags:
        - Key: Name
          Value: "Workshop Public Routes"
        - Key: "CostCenter"
          Value: !Ref "CostCenter"

  DefaultPublicRoute:
    Condition: CreateVPC
    Type: AWS::EC2::Route
    DependsOn:  IGWAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref WorkshopIGW

  PublicSubnet1RouteTableAssociation:
    Condition: CreateVPC
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref WorkshopSubnet      

  SecHubWorkshopEnv:
    Condition: CreateCloud9Instance
    Type: AWS::Cloud9::EnvironmentEC2
    Properties: 
      Description: "Security Hub Remediations Workshop"
      InstanceType: !Ref "Cloud9InstanceType"
      AutomaticStopTimeMinutes: !Ref "Cloud9AutomaticStopTime"
      OwnerArn: 
        Fn::If:
        - Cloud9OwnerArnEmpty
        - !Sub 'arn:aws:sts::${AWS::AccountId}:assumed-role/TeamRole/MasterKey'
        - Ref: Cloud9OwnerArn
      SubnetId:
        Fn::If:
        - CreateVPC
        - !Ref "WorkshopSubnet"
        - Ref: AWS::NoValue


  TestTargetHighRiskPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties: 
      ManagedPolicyName: "SecurityHubRemediationWorkshopTestTargetHighRisk"
      Description: "Allows reading objects from any bucket"
      PolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          -
            Sid: "Module4Overpriviledged"
            Effect: "Allow"
            Action:
              - "s3:GetObject"
            Resource: "*"
  
  CliHostPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties: 
      ManagedPolicyName: "SecurityHubWorkshopCliHost"
      Description: "Enables the cli host to invoke AWS apis"
      PolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          -
            Effect: "Allow"
            Action: 
              - "ec2:StartInstances"
              - "ec2:TerminateInstances"
              - "ec2:Describe*"
              - "guardduty:CreateSampleFindings"
              - "guardduty:ArchiveFindings"
              - "ssm:SendCommand"
              - "lambda:ListFunctions"
              - "ec2:CreateVolume"
              - "ec2:*Snapshot"
              - "ec2:ModifySnapshotAttribute"
            Resource: "*"

  CloudCustodianLambdaDeploymentManagedPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties: 
      ManagedPolicyName: CloudCustodianLambdaDeployment
      Description: "Required for deployment by lambda's generated by CloudCustodian policies Mode section"
      PolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          -
            Sid: "CCDeployLambdas"
            Effect: "Allow"
            Action: 
              - "lambda:CreateFunction"
              - "lambda:InvokeFunction"
              - "lambda:UpdateFunctionConfiguration"
              - "lambda:CreateEventSourceMapping"
              - "lambda:UpdateEventSourceMapping"
              - "lambda:DeleteEventSourceMapping"
              - "lambda:UpdateAlias"
              - "lambda:UpdateFunctionCode"
              - "lambda:AddPermission"
              - "lambda:DeleteFunction"
              - "lambda:RemovePermission"
              - "lambda:CreateAlias"
              - "lambda:DeleteAlias"
              - "lambda:GetFunction"
              - "lambda:PutFunctionConcurrency"
              - "lambda:DeleteFunctionConcurrency"
              - "lambda:TagResource"
              - "lambda:UntagResource"
            Resource:
              - !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:custodian-*'
          -
            Sid: "CCPassRole"
            Effect: "Allow"
            Action:
              - "iam:PassRole"
            Resource:
              - !Sub 'arn:aws:iam::${AWS::AccountId}:role/CloudCustodian'
             
  CloudCustodianPolicyActions:
    Type: AWS::IAM::ManagedPolicy
    Properties: 
      ManagedPolicyName: CloudCustodianPolicyActions
      Description: "IAM Actions required to execute to Actions part of a CloudCustodian policies"
      PolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          -
            Sid: "CCPolicyActionExecution"
            Effect: "Allow"
            Action: 
              - "ssm:SendCommand"
              - "ssm:CreateOpsItem"
              - "iam:DeleteAccessKey"
              - "iam:UpdateAccessKey"
              - "iam:Tag*"
              - "iam:UnTag*"
              - "kms:UntagResource"
              - "kms:TagResource"
              - "events:PutRule"
              - "events:PutTargets"
              - "ec2:CopySnapshot"
              - "ec2:DeleteSnapshot"
              - "ec2:CreateImage"
              - "ec2:CreateSnapshot*"
              - "ec2:CreateTags"
              - "ec2:DeleteTags"
              - "ec2:ModifyVpcAttribute"
              - "ec2:ModifyInstanceAttribute"
              - "ec2:AssociateIamInstanceProfile"
              - "ec2:DisassociateIamInstanceProfile"
              - "ec2:AuthorizeSecurityGroupIngress"
              - "ec2:RevokeSecurityGroupIngress"
              - "ec2:StopInstances"
              - "ec2:TerminateInstances"
              - "config:PutEvaluations"
              - "s3:PutBucketTagging"
              - "s3:PutBucketPolicy"
              - "tag:TagResources"
              - "tag:UntagResources"
              - "lambda:TagResource"
              - "lambda:UntagResource"
              - "elasticfilesystem:CreateTags"
              - "elasticfilesystem:DeleteTags"
              - "logs:TagLogGroup"
              - "logs:UntagLogGroup" 
            Resource: "*"
          -
            Sid: "CCSecurityHubActions"
            Effect: "Allow"
            Action:
              - "securityhub:UpdateFindings"
              - "securityhub:BatchImportFindings"
              - "securityhub:CreateActionTarget"
              - "securityhub:UpdateActionTarget"
            Resource: "*"
          -
            Sid: "LambdasInVpc"
            Effect: "Allow"
            Action:
              - "ec2:DeleteNetworkInterface"
              - "ec2:CreateNetworkInterface"
            Resource: "*"
            
  TestTargetRole: 
    Type: AWS::IAM::Role
    Properties:
      RoleName: "SecurityHubRemediationWorkshopTestTarget"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com" 
            Action: 
              - "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns: 
        - "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore"
        - "arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy"
        - Ref: "TestTargetHighRiskPolicy"
      Tags: 
        - Key: "CostCenter"
          Value: !Ref "CostCenter"

  CliInstance:            
    Type: AWS::IAM::Role
    Properties:
      RoleName: "SecurityHubRemediationWorkshopCli"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com" 
            Action: 
              - "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns: 
        - "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore"
        - "arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy"
        - Ref: "CliHostPolicy"
      Tags: 
        - Key: "CostCenter"
          Value: !Ref "CostCenter"    
          
  CliInstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      InstanceProfileName: "SecurityHubRemediationWorkshopCli"
      Path: "/"
      Roles:
        - Ref: "CliInstance"
        
  TestTargetInstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      InstanceProfileName: "SecurityHubRemediationWorkshopTestTarget"
      Path: "/"
      Roles:
        - Ref: "TestTargetRole"  


  CloudCustodianLambdaExecution: 
    Type: AWS::IAM::Role
    Properties:
      RoleName: "CloudCustodian"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: 
              - "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns: 
        - "arn:aws:iam::aws:policy/SecurityAudit"
        - "arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy"
        - Ref: "CloudCustodianPolicyActions"
      Tags: 
        - Key: "CostCenter"
          Value: !Ref "CostCenter"        

  CloudCustodianCli: 
    Type: AWS::IAM::Role
    Properties:
      RoleName: "CloudCustodianCli"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              AWS: 
                - Fn::GetAtt: [CliInstance, Arn]
            Action: 
              - "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns: 
        - "arn:aws:iam::aws:policy/SecurityAudit"
        - "arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy"
        - Ref: "CloudCustodianLambdaDeploymentManagedPolicy"
        - Ref: "CloudCustodianPolicyActions"
      Tags: 
        - Key: "CostCenter"
          Value: !Ref "CostCenter"      

  RemediationTargetSG:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: "SecurityHub Remediation Test Target" 
      VpcId: !Ref WorkshopVpc
      Tags: 
        - Key: "Name"
          Value: "SG-SecurityHubRemediationsTestTarget"
        - Key: "CostCenter"
          Value: !Ref "CostCenter"
      SecurityGroupIngress:
        - CidrIp: "0.0.0.0/0"
          Description: "Public ingress to port 443 however the EC2 instance it will be attached to will not have a process listening to that port, and is udp rather than tcp to cut the noise"
          FromPort: 443
          ToPort: 443
          IpProtocol: udp
          
  RemediationTestTarget:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref "LatestAmiId" 
      InstanceType: !Ref "TestTargetInstanceType"
      Tags:
        - Key: "Name"
          Value: "RemediationTestTarget"
        - Key: "CostCenter"
          Value: !Ref "CostCenter"  
      SecurityGroupIds:
        - Ref: "RemediationTargetSG"
      SubnetId: !Ref WorkshopSubnet 
      IamInstanceProfile: !Ref "TestTargetInstanceProfile"
      
  GeneratedFindingUser:    
    Type: AWS::IAM::User
    Properties: 
      UserName: GeneratedFindingUserName

  GeneratedFindingUserAccessKey: 
    DependsOn: GeneratedFindingUser
    Type: AWS::IAM::AccessKey
    Properties: 
      UserName: GeneratedFindingUserName
      
  GuardDutyDetector: 
    Condition: EnableGuardDuty
    Type: AWS::GuardDuty::Detector
    Properties: 
      Enable: True
   
  SecurityHub: 
    Condition: EnableGuardDuty
    Type: AWS::SecurityHub::Hub
    Properties:
      Tags:
          CostCenter: !Ref "CostCenter"  